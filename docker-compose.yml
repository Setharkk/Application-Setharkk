version: '3.8'

services:
  # Service Nginx
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
      - grafana
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '0.30'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M

  # Service Frontend (Vue.js/Vite)
  frontend:
    build:
      context: ./frontend
      target: development
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:3001
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '0.30'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M

  # Service Backend (Node.js)
  backend:
    build:
      context: ./backend
      target: development
    ports:
      - "3006:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DB}?authSource=admin
      - REDIS_URI=redis://redis:6379
      - POSTGRES_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - ELASTICSEARCH_NODE=http://elasticsearch:9200
      - RABBITMQ_URI=amqp://rabbitmq:5672
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=setharkk
      - POSTGRES_PASSWORD=setharkk
      - POSTGRES_DB=setharkk
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U setharkk"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Base de données MongoDB
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=setharkk
      - MONGO_INITDB_ROOT_PASSWORD=setharkk
      - MONGO_INITDB_DATABASE=setharkk
      - MONGODB_USER=setharkk
      - MONGODB_PASS=setharkk
      - MONGODB_DATABASE=setharkk
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    command: mongod --auth
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - app-network

  # Cache Redis
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  # Service Elasticsearch
  elasticsearch:
    image: elasticsearch:8.12.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q 'status.*green\\|status.*yellow'"]
      interval: 20s
      timeout: 10s
      retries: 3

  # Service RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Service Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Service Grafana (Visualisation)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  business-metrics-exporter:
    image: prom/node-exporter:latest
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.textfile.directory=/metrics'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - ./metrics:/metrics:ro
    ports:
      - "9100:9100"
    networks:
      - app-network
    labels:
      org.label-schema.group: "monitoring"

  # Service pour collecter les métriques business personnalisées
  custom-metrics:
    build: ./metrics-collector
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/setharkk
      - REDIS_URI=redis://redis:6379
    ports:
      - "9092:9091"
    volumes:
      - ./metrics:/app/metrics
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9091/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  metrics-collector:
    build:
      context: ./metrics-collector
      target: development
    ports:
      - "9091:9091"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://setharkk:setharkk@mongodb:27017/setharkk?authSource=admin
      - REDIS_URI=redis://redis:6379
      - PORT=9091
    volumes:
      - ./metrics-collector:/app
      - /app/node_modules
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first

volumes:
  mongodb_data:
  redis_data:
  postgres_data:
  elasticsearch_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data: 

networks:
  app-network:
    driver: bridge 